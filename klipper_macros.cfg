[gcode_macro PRINT_START]
gcode:
    START_PRINT {rawparams}

[gcode_macro PRINT_END]
gcode:
    END_PRINT {rawparams}


[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED|default(60)|float %}
    {% set TOOL_TEMP = params.EXTRUDER|default(175)|float %}
    SET_LED LED="board_neopixel" RED=0 GREEN=0 BLUE=0 WHITE=1
    M104 S175 ;Standby the extruder
    M190 S{BED_TEMP} ;Wait for the bed
    M107  #disable fan
    #SKEW_PROFILE LOAD=my_skew_profile
    G21    ; set units n millimeters
    G90    ; use absolute coordinates
    M82    ; use absolute distances for extrusion
    G92 E0 ; reset extrusion distance
    G28 ;Home the printer
    BED_MESH_CALIBRATE
    G1 Z10 F3000 ; Move the nozzle near the bedv
    M190 S{BED_TEMP} ;Wait for bed
    M109 S{TOOL_TEMP} ;Wait for nozzle
    G92 E0 ;Reset Extruder
    SKEW_PROFILE LOAD=my_skew_profile
    LINE_PURGE
    #NEOPIXEL_DISPLAY LED="board_neopixel" TYPE=print_percent MODE=progress
    #hit the lights
    SET_LED LED="board_neopixel" RED=0 GREEN=0 BLUE=0 WHITE=1
    

# BOWDEN_LENGTH in centimeters
# LAYER_HEIGHT and NOZZLE_SIZE in millimeters
# PRINT_SPEED in millimeters per secound
[gcode_macro CALCULATE_PA]
gcode:
    {% set material = params.MATERIAL|default("PLA") %}
    {% set bowden_length = (params.BOWDEN_LENGTH|default(5.5)|float) / 10 %}
    {% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %}
    {% set nozzle_size = params.NOZZLE_SIZE|default(0.4)|float %}
    {% set print_speed = params.PRINT_SPEED|default(100)|float %}
    {% set material_constant = {'PLA': 100, 'PETG': 120, 'ABS': 110, 'Nylon': 130, 'TPU': 150, 'PVB': 100}[material] %}
    {% set vfr = nozzle_size * layer_height * print_speed %}
    {% set pressure_advance = (vfr * bowden_length) / material_constant %}
    SET_PRESSURE_ADVANCE ADVANCE={pressure_advance}
    
[gcode_macro END_PRINT]
gcode:
    {% set BED_MIN_X= params.BED_MIN_X|default(0)|float %}
	{% set BED_MIN_Y= params.BED_MIN_Y|default(0)|float %}
    {% set BED_MIN_Z= params.BED_MIN_Z|default(0)|float %}
    {% set BED_MAX_X= params.BED_MAX_X|default(200)|float %}
	{% set BED_MAX_Y= params.BED_MAX_Y|default(200)|float %}
    {% set BED_MAX_Z= params.BED_MAX_Z|default(150)|float %}

    #hit the lights
    SET_LED LED="board_neopixel" RED=0 GREEN=0 BLUE=0 WHITE=1

    #DROP SKEW
    SET_SKEW CLEAR=1

    #HEATERS OFF
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91 ;releative positioning
    G1 X-2 Y-2 E-3 F3000
    # Raise nozzle by 10mm
    G1 Z10 F2000
    G90 ; Absolute Positioning
    G1 X{BED_MAX_X} Y{BED_MAX_Y} Z{BED_MAX_Z} F1000 ;Present print
    #SAVE_STUFF
    SAVE_IF_SET
    
  

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
  {% set retract = client.cancel_retract|default(5.0)|abs %}
  {% set BED_TEMP = params.BED|default(60)|float %}
  {% set TOOL_TEMP = params.EXTRUDER|default(175)|float %}
  ##### define park position #####
  {% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
            else "X=" ~ client.park_at_cancel_x %}
  {% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
            else "Y=" ~ client.park_at_cancel_y %}
  {% set custom_park = park_x|length > 0 or park_y|length > 0 %}
  ##### end of definitions #####
  # restore idle_timeout time if needed
  SET_SKEW CLEAR=1
  {% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
  {% endif %}
  {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
  _CLIENT_RETRACT LENGTH={retract}
  TURN_OFF_HEATERS
  M106 S0
  {client.user_cancel_macro|default("")}
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
  # clear pause_next_layer and pause_at_layer as preparation for next print
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  CANCEL_PRINT_BASE
  M190 S{BED_TEMP} ;Wait for the bed

    
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  ##### get user parameters or use default ##### 
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set idle_timeout = client.idle_timeout|default(0) %}
  {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
  {% set restore = False if printer.toolhead.extruder == ''
  else True  if params.RESTORE|default(1)|int == 1 else False %}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
  # set a new idle_timeout value
  {% if idle_timeout > 0 %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
    SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
  {% endif %}
  PAUSE_BASE
  {client.user_pause_macro|default("")}
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}


; This is where the magic happens:
; MAX_AGE is checked against the stored variable
; SAVE=1 can be used to force saving the mesh (restarts klipper, so
;        only for manual usage)
; FORCE_LEVEL=1 forces a mesh probe even if MAX_AGE is not reached
[gcode_macro LEVEL_BED_ADVANCED]
description: Levels the bed if the last leveling was MAX_AGE runs ago. Force leveling by setting FORCE
variable_save_at_end: 0
gcode:
  {% set max_age = params.MAX_AGE|default(3)|int %}
  {% set force_level = params.FORCE|default(0)|int %}
  {% set save = params.SAVE|default(0)|int %}

  ; load level_age from stored variables
  {% set svv = printer.save_variables.variables %}
  {% if "level_age" not in svv %} ; first run
    SAVE_VARIABLE VARIABLE=level_age VALUE={max_age}
    {% set level_age = 1 %}
  {% else %} ; load level_age and increment
    {% set level_age = svv.level_age %}
    SAVE_VARIABLE VARIABLE=level_age VALUE={level_age|int + 1}
  {% endif %}
  {action_respond_info("Bed mesh age is " + level_age|string) + "."} 

  ; Level eventually
  {% if force_level or (level_age >= max_age|int) %}
    {action_respond_info("Bed mesh exceeded max age. Leveling...")} 

    ; homing if not homed yet
    {% if 'xy' not in printer.toolhead.homed_axes %}
    G28
    {% endif %}
  
    BED_MESH_CALIBRATE
    {% if save %}
      SAVE_VARIABLE VARIABLE=level_age VALUE=1 ; reset counter
      SAVE_CONFIG
    {% else %}
      SET_GCODE_VARIABLE MACRO=LEVEL_BED_ADVANCED VARIABLE=save_at_end VALUE=1
    {% endif %}
  {% else %}
    {action_respond_info("Loading old bed mesh.")} 
    BED_MESH_PROFILE LOAD=default
  {% endif %} 

# runs SAVE_CONFIG if the g-code variable was set in start gcode
[gcode_macro SAVE_IF_SET]
gcode:
  {% if printer["gcode_macro LEVEL_BED_ADVANCED"].save_at_end == 1 %}
  {action_respond_info("Saving was requested - saving and restarting now.")}
  SAVE_VARIABLE VARIABLE=level_age VALUE=1
  SAVE_CONFIG
  {% endif %}

# Fully featured homing override for sensorless (and sensored!) homing.

# NOTE: As safe_z_home is incompatible with homing_overide:
#   All of the SzH config settings have been replicated below.
#   You can set the values you previously used in SzH to mimic the behavior.
#   Many additional values can also be configured.
#   This makes for a very flexible/customizable homing suite.
#   The latest release supports

# Release Notes: 2022-10-21
# Stable Release 1.3.1
# 
# This set of macros and homing_override will make giving up safe_z_home easy!
# The CONFIGURATION section at the start contains parameters for all your favorite 
# safe_z_home options as well as many addition ones!
# 
# This is specifically targeted towards sensorsless homing builds
# and it allows you to fully customize the behavior
# and extra goodies like:
# 
# - stepper_homing_current
# - "unsafe" pre-homing z-hop height/speed
# - XY homing "bounce" speed/distance
# - post-z-homing z-hop speed/height
# - custom homing acceleration
# 
# Set BOUNCE to 0 to disable the bounce feature.
# 
# With the latest update you can now set CURRENTLESS to 1 to use this override
# without changing the stepper current. This allows this override to be used with
# drivers that cannot set a different current.

[homing_override]
axes: xyz
set_position_z: 0
gcode:
    ######## CONFIGURATION VALUES #######
    {% set CURRENTLESS = 0 %}           # Set to 1 for regular homing
    {% set PROBE_X = 220 %}             # The X coordinate for safe z-homing
    {% set PROBE_Y = 185 %}             # The Y coordinate for safe z-homing
    {% set PROBE_XY_SPEED = 50 %}       # The travel speed when moving to those coordinates
    {% set MOVE_TO_PREVIOUS = False %}  # Save and return to the previous position after homing
    ############# NOTE ################## Set move to prev speed to 0 to use previous gcode speed
    {% set MOVE_TO_PREV_SPEED = 50 %}   # Speed at which to return to previous position
    {% set HOMING_BOUNCE = 5.0 %}       # The amount to "bounce" after hitting endstops
    {% set BOUNCE_SPEED = 25 %}         # The speed to "bounce" after hitting endstops
    {% set Z_HOP = 3 %}                 # The Z-hop distance after homing Z
    {% set Z_HOP_SPEED = 10 %}          # The speed of Z-hop after homing Z
    ############# NOTE ################## Only use current values within the specs of your steppers
    {% set X_HOMING_CUR = 0.500 %}      # The X-axis homing current (in Amps)
    {% set Y_HOMING_CUR = 0.500 %}      # The Y-axis homing current (in Amps)
    {% set HOMING_ACCEL = 500 %}        # The homing acceleration (in mm/s/s)
    ############ WARNING ################ The pause must be long enough for the drivers to apply the current
    {% set PAUSE = 1000 %}              # Miliseconds to pause after changing current
    ############ DANGER ################# Be careful with these as they are performed before homing
    {% set SAFETY_HOP = 3 %}           # The "unsafe" z-hop before homing XY
    {% set SAFETY_HOP_SPEED = 10 %}      # The "unsafe" z-hop speed
    #####################################

    # Read the current acceleration max
    {% set cur_accel = printer.toolhead.max_accel %}
    {% set cur_accel_to_decel = printer.toolhead.max_accel_to_decel %}
    # Read requested homing axis
    {% set requested = {'x': False,
                        'y': False,
                        'z': False} %}
    {% if   not 'X' in params
        and not 'Y' in params 
        and not 'Z' in params %}
        {% set X, Y, Z = True, True, True %}
    {% else %}
        {% if 'X' in params %}
            {% set X = True %}
            {% set null = requested.update({'x': True}) %}
        {% endif %}       
        {% if 'Y' in params %}
            {% set Y = True %}
            {% set null = requested.update({'y': True}) %}
        {% endif %}     
        {% if 'Z' in params %}
            {% set Z = True %}
            {% set null = requested.update({'z': True}) %}
        {% endif %}        
    {% endif %}
    
    #STATUS_HOMING

    # Pre-homing "unsafe" z-hop to protect bed
    {% if not "xyz" in printer.toolhead.homed_axes %}
        G1 Z{SAFETY_HOP} F{(SAFETY_HOP_SPEED * 60)}
    {% endif %}

    # Save state for MOVE_TO_PREVIOUS
    {% if MOVE_TO_PREVIOUS %}
        SAVE_GCODE_STATE NAME=homing
    {% endif %}

    # X and Y homing
    {% if CURRENTLESS != 1 %}
        {% if X and Y %}
            SENSORLESS_HOME_ALL X_CUR={X_HOMING_CUR} Y_CUR={Y_HOMING_CUR} ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
        {% elif X %}
            SENSORLESS_HOME_X CURRENT={X_HOMING_CUR} ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
        {% elif Y %}
            SENSORLESS_HOME_Y CURRENT={Y_HOMING_CUR} ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
        {% endif %}
    {% else %}
        {% if X and Y %}
            SENSOR_HOME_ALL ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
        {% elif X %}
            SENSOR_HOME_X ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
        {% elif Y %}
            SENSOR_HOME_Y ACCEL={HOMING_ACCEL} BOUNCE={HOMING_BOUNCE} BOUNCE_SPEED={BOUNCE_SPEED} PAUSE={PAUSE}
        {% endif %}
    {% endif %}

    # Z Homing
    {% if Z %}
        G1 X{PROBE_X} Y{PROBE_Y} F{(PROBE_XY_SPEED * 60)} # Move to safe coordinates
        G28 Z # Home Z
        G1 Z{Z_HOP} F{(Z_HOP_SPEED * 60)} # Post z-home z-hop
    {% endif %}

    # Restore state for MOVE_TO_PREVIOUS
    {% if MOVE_TO_PREVIOUS %}
        {% if MOVE_TO_PREV_SPEED == 0 %}
            RESTORE_GCODE_STATE NAME=homing MOVE=1
        {% else %}
            RESTORE_GCODE_STATE NAME=homing MOVE=1 MOVE_SPEED={MOVE_TO_PREV_SPEED}
        {% endif %}
    {% endif %}

    # Reset any acceleration changes
    {% if printer.toolhead.max_accel != cur_accel %}
        SET_VELOCITY_LIMIT ACCEL={cur_accel} ACCEL_TO_DECEL={cur_accel_to_decel}
    {% endif %}

    #STATUS_READY



# SENSORLESS HOMING

[gcode_macro SENSORLESS_HOME_ALL]
description: Home XY with modified current
gcode:
    {% set HOME_CUR_X = params.X_CUR|default(0.250)|float %}
    {% set HOME_CUR_Y = params.Y_CUR|default(0.250)|float %}
    {% set HOME_ACCEL = params.ACCEL|default(500)|float %}
    {% set BOUNCE = params.BOUNCE|default(10)|float %}
    {% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
    {% set driver_config_x = printer.configfile.settings['tmc2209 stepper_x'] %}
    {% set driver_config_y = printer.configfile.settings['tmc2209 stepper_y'] %}
    {% set RUN_CUR_X = driver_config_x.run_current %}
    {% set RUN_CUR_Y = driver_config_y.run_current %}
    {% set PAUSE = params.PAUSE|default(2000)|int %}

    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR_Y}
    # Set homing acceleration
    SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
    # Pause to ensure driver stall flag is clear
    G4 P{PAUSE}
    # Home X
    G28 X0
    {% if BOUNCE %}
        # Move away
        G91
        G1 X{BOUNCE} F{(BOUNCE_SPEED * 60)}
        G90
    {% endif %}
    # Home Y
    G28 Y0
    {% if BOUNCE %}
        # Move away
        G91
        G1 Y{BOUNCE} F{(BOUNCE_SPEED * 60)}
        G90
    {% endif %}
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR_Y}
    # Pause to ensure driver stall flag is clear
    G4 P{PAUSE}


[gcode_macro SENSORLESS_HOME_X]
description: Home X with modified current
gcode:
    {% set HOME_CUR = params.CURRENT|default(0.250)|float %}
    {% set HOME_ACCEL = params.ACCEL|default(500)|float %}
    {% set BOUNCE = params.BOUNCE|default(10)|float %}
    {% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_x'] %}
    {% set RUN_CUR = driver_config.run_current %}
    {% set PAUSE = params.PAUSE|default(2000)|int %}

    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR}
    # Set homing acceleration
    SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
    # Pause to ensure driver stall flag is clear
    G4 P{PAUSE}
    # Home
    G28 X0
    {% if BOUNCE %}
        # Move away
        G91
        G1 X{BOUNCE} F{(BOUNCE_SPEED * 60)}
        G90
    {% endif %}
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR}
    # Pause to ensure driver stall flag is clear
    G4 P{PAUSE}


[gcode_macro SENSORLESS_HOME_Y]
description: Home Y with modified current
gcode:
    {% set HOME_CUR = params.CURRENT|default(0.250)|float %}
    {% set HOME_ACCEL = params.ACCEL|default(500)|float %}
    {% set BOUNCE = params.BOUNCE|default(10)|float %}
    {% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_y'] %}
    {% set RUN_CUR = driver_config.run_current %}
    {% set PAUSE = params.PAUSE|default(2000)|int %}
    
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR}
    # Set homing acceleration
    SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
    # Pause to ensure driver stall flag is clear
    G4 P{PAUSE}
    # Home
    G28 Y0
    {% if BOUNCE %}
        # Move away
        G91
        G1 Y{BOUNCE} F{(BOUNCE_SPEED * 60)}
        G90
    {% endif %}
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR}
    # Pause to ensure driver stall flag is clear
    G4 P{PAUSE}



# HOME WITH ENDSTOPS

[gcode_macro SENSOR_HOME_ALL]
description: Home XY
gcode:
    {% set HOME_ACCEL = params.ACCEL|default(500)|float %}
    {% set BOUNCE = params.BOUNCE|default(10)|float %}
    {% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
    {% set PAUSE = params.PAUSE|default(2000)|int %}

    # Set homing acceleration
    SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
    # Pause to ensure driver stall flag is clear
    G4 P{PAUSE}
    # Home X
    G28 X0
    {% if BOUNCE %}
        # Move away
        G91
        G1 X{BOUNCE} F{(BOUNCE_SPEED * 60)}
        G90
    {% endif %}
    # Home Y
    G28 Y0
    {% if BOUNCE %}
        # Move away
        G91
        G1 Y{BOUNCE} F{(BOUNCE_SPEED * 60)}
        G90
    {% endif %}
    # Pause to ensure driver stall flag is clear
    G4 P{PAUSE}


[gcode_macro SENSOR_HOME_X]
description: Home X
gcode:
    {% set HOME_ACCEL = params.ACCEL|default(500)|float %}
    {% set BOUNCE = params.BOUNCE|default(10)|float %}
    {% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
    {% set PAUSE = params.PAUSE|default(2000)|int %}

    # Set homing acceleration
    SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
    # Pause to ensure driver stall flag is clear
    G4 P{PAUSE}
    # Home
    G28 X0
    {% if BOUNCE %}
        # Move away
        G91
        G1 X{BOUNCE} F{(BOUNCE_SPEED * 60)}
        G90
    {% endif %}
    # Pause to ensure driver stall flag is clear
    G4 P{PAUSE}



[gcode_macro SENSOR_HOME_Y]
description: Home Y
gcode:
    {% set HOME_ACCEL = params.ACCEL|default(500)|float %}
    {% set BOUNCE = params.BOUNCE|default(10)|float %}
    {% set BOUNCE_SPEED = params.BOUNCE_SPEED|default(20)|float %}
    {% set PAUSE = params.PAUSE|default(2000)|int %}

    # Set homing acceleration
    SET_VELOCITY_LIMIT ACCEL={HOME_ACCEL} ACCEL_TO_DECEL={(HOME_ACCEL * 0.5)}
    # Pause to ensure driver stall flag is clear
    G4 P{PAUSE}
    # Home
    G28 Y0
    {% if BOUNCE %}
        # Move away
        G91
        G1 Y{BOUNCE} F{(BOUNCE_SPEED * 60)}
        G90
    {% endif %}
    # Pause to ensure driver stall flag is clear
    G4 P{PAUSE}